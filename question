Question No : 1 / 1
Full Screen
bookmarkIcon
Flight Booking Application - Full Stack Incremental Project (Spring Boot and Angular)

Spring Boot

 

Day 15: 

Tasks: 

Create a folder named controller inside com.examly.springapp. 

Inside the controller folder, create a class named TestController. 

Implement an HTTP GET request: 

Endpoint: /api/test/welcome 

	Returns a String "Welcome to the Flight Booking Application". 

 

Day 16: 

Tasks: 

Create a folder named model inside com.examly.springapp. 

Inside the model folder, create a class named Flight with the following attributes: 

flightId: Long
flightNumber: String
airline: String
departureLocation: String
arrivalLocation: String
departureTime: String
arrivalTime: String
price: double
totalSeats: int


Inside the TestController class, Implement the GET Endpoint: 

	GET - "api/test/flights" - Returns a List<Flight> object. Create Flight objects with predefined values and return them as a list. 



Day 17:

Overview:

In this Flight Booking Application, various flights are available for users to book tickets. Each flight has specific attributes such as flight number, airline, departure and arrival locations, and available seats. Users can view these flights and book their tickets based on the available seats.

There are two types of users for this application:

ADMIN
USER
Functionalities:

Admin:

Create, update, and delete flights.
Modify flight details such as flight number, airline, departure location, arrival location, departure and arrival times, price, total seats, etc.
User:

View all available flights.
Book a flight ticket.
Check for available seats during the booking process.
If there are no available seats, the system will throw a custom exception: "No available seats for this flight".
Tasks:

1.	In the Flight class, use the @Entity annotation to define the representation of the Flight object in the database and configure the flightId attribute as the primary key with an autogenerated value.

2.	Create a folder named repository and service inside com.examly.springapp.

3.	Inside the repository folder, create an interface named FlightRepo and annotate it with @Repository. This interface should extend JpaRepository<Flight, Long>.

4.	Inside the service folder, create an interface named FlightService and include abstract methods to implement CRUD operations for the Flight model.

5.	Inside the service folder, create a folder named serviceImpl.

6.	Inside the serviceImpl folder, create a class FlightServiceImpl which implements the FlightService interface. This class should be annotated with @Service and provide implementations for the abstract methods defined in the interface.

7.	Inside the controller folder, create a class FlightController and annotate it with @RestController to handle the following API endpoints:

POST - api/flight - Adds a new flight to the system and returns the Flight object on successful insertion.
PUT - api/flight/{flightId} - Updates flight details. All fields are modifiable except for the flightId field. Returns the updated Flight object on successful update.


Day 18:

Tasks:

Continue from the previous day's task.

In the FlightController, implement the following API endpoints:

1.	GET - api/flights - Returns a List<Flight> object on successful retrieval of all flights.

2.	GET - api/flights/{flightId} - Returns a Flight object on successful retrieval of a specific flight by its flightId.

3.	DELETE - api/flights/{flightId} - Returns a boolean value of true on successful deletion of a flight.



Day 19: 

Tasks: 

1.	Inside the model folder, create a class named "Booking" with the following attributes: 

bookingId: Unique identifier for each booking (auto-generated).
bookingDate: Indicates when the booking was made.
numberOfPassengers: Specifies how many passengers are included in the booking.
status: Indicates the current status of the booking.
Implement getters, setters, a default constructor, and a parameterized constructor for the attributes of the Booking model. 

2.	Inside the repository folder, create an interface named "BookingRepo" and annotate it with @Repository. This interface should extend JpaRepository<Booking, Long> to provide CRUD operations for the Booking model. 



Day 20: 

Tasks: 

In the Booking class:

Ensure there is a flight attribute of type Flight annotated with @ManyToOne and @JoinColumn(name = "flightId").
Implement getter and setter methods for this attribute.
Update constructors in both the Flight and Booking classes as needed to initialize collections and maintain integrity.
Review the repository and service layers to ensure they accommodate the new relationships, allowing for proper handling of model creation, updates, and deletions related to flight bookings.


Day 21: 

Tasks: 

Inside the service folder:

Create an interface named BookingService and include the following abstract methods:

Booking createBooking(Booking booking);

Booking getBookingById(Long id);

List<Booking> getAllBookings();

Booking updateBooking(Long id, Booking booking); (New method for updating bookings)

Inside the serviceImpl folder:



Create a class named BookingServiceImpl which implements the BookingService interface. This class should be annotated with @Service.

Provide implementations for the abstract methods defined in the BookingService interface, ensuring proper handling of booking operations, including necessary validations.



Day 22: 

Tasks: 

Continue with the previous day's task:

Ensure that the BookingServiceImpl class properly integrates with the new exception handling mechanism.
Create a folder named exception inside com.examly.springapp.
Inside the exception folder:

Create an exception class named SeatsExceededException:
This exception should be thrown when a booking request exceeds the available seat count for a specific flight.
Implement a constructor that accepts a message indicating the issue with the seat count.


Day 23: 

Tasks: 

Inside the controller folder:

Create a class named BookingController and annotate it with @RestController to handle the following API endpoints:

Implement the following API endpoints:

POST - "api/bookings":

This endpoint is used to create a new booking.
It accepts a Booking object in the request body and returns the created Booking object on successful insertion.
If the booking fails (e.g., due to insufficient seat count), the appropriate exception will be thrown.
GET - "api/bookings/{id}":

This endpoint retrieves a specific booking by its ID.
Returns the Booking object on successful retrieval.
GET - "api/bookings/user/{userId}":

This endpoint retrieves all bookings associated with a specific user.
Returns a List<Booking> object on successful retrieval.
GET - "api/bookings":

This endpoint retrieves all bookings.
Returns a List<Booking> object on successful retrieval.
PUT - "api/bookings/{id}":

This endpoint updates a specific booking.
Accepts a Booking object in the request body and returns the updated Booking object on successful update.


Day 24: 

Task: 

Inside the model folder:

Create a class named User with the following attributes:

userId - int (auto-generated, primary key)
email - String
password - String
username - String
mobileNumber - String
userRole - String (Admin/Traveller)
Implement getters, setters, and default and parameterized constructors for the attributes of the User model.

Inside the repository folder:

Create an interface named UserRepo and annotate it with @Repository.
This interface should extend JpaRepository<User, Integer> to provide CRUD operations for the User model.
Inside the service folder:

Create an interface named UserService and include the following abstract methods:

User createUser(User user);
User loginUser(User user);
User getUserById(int userId);
Inside the serviceImpl folder:

Create a class named UserServiceImpl that implements the UserService interface.
Annotate this class with @Service and provide implementations for the abstract methods defined in the interface.
Inside the controller folder:

Create a class named AuthController and annotate it with @RestController to handle the following API endpoints:



POST - "api/register":

This endpoint is used to register a new user.
Returns the User object on successful registration.
POST - "api/login":

This endpoint handles user login.
Returns a token and user details on successful login.
GET - "api/user/{userId}":

This endpoint retrieves a user by their ID.
Returns the User object on successful retrieval.
GET - "api/user":

This endpoint retrieves a list of all users.
Returns a List<User> object on successful retrieval.


Note: Please ensure to comment out any security-related code, including dependencies added in the pom.xml file, or alternatively, add all APIs used in the application in the requestMatchers() method and permitAll() which is configured in the SecurityConfig class. The permitAll() method allows unrestricted access to specified APIs, ensuring they can be accessed without authentication or authorization requirements. This step is essential before running the test cases or submitting the project to avoid potential failure of certain test cases.



Day 25: 

Tasks: 

Continue with the previous day task. 

Inside configuration, create a class " CrosConfig " which implements WebMvcConfigurer to handle CORS configuration. Annotate this class with @Configuration and @EnableWebMvc, and override the addCorsMappings(CorsRegistry registry) method. 



Note: 

Do not modify the application.properties and pom.xml files. If you change there may be build failure and the test case will fail. Follow the naming convention as specified above. 



API endpoint:  8080 



Platform Guidelines: 

To run the project use Terminal in the platform. 

Spring Boot: 

Navigate to the springapp directory - "cd springapp" 

To start/run the spring boot application - "mvn spring-boot:run" 

To Connect the Database Open the terminal 

mysql -u root --protocol=tcp -p 

password:examly 





ANGULAR



Instructions:

Ensure that the variable and function names match those provided in the day-wise task.
Maintain consistency by using the same names for components, models, and services as described in the day-wise task.
Before executing the test case, navigate to the angularapp directory with the command cd angularapp, then install necessary dependencies using npm i.
Please take a look at the sample frontend screenshots provided at the last section for a reference to the application's layout and design.


Day 29:

Tasks:

Create interfaces for User, Login, Flight, and Booking using TypeScript.

Create a folder named "models" in the "src/app" folder.

Create models for User, Login, Flight and Booking  with the following variables as mentioned below.



user.model.ts

    userId?: number;

    email: string;

    password: string;

    username: string;

    mobileNumber: string;

    userRole: string;



login.model.ts

    email: string;

    password: string;

  

flight.model.ts

    flightId?: number;

    flightNumber: string;

    airline: string;

    departureLocation: string;

    arrivalLocation: string;

    departureTime: string; // Change to string for time only

    arrivalTime: string;   // Change to string for time only

    price: number;



booking.model.ts

    bookingId?: number;

    flightId?: number; // Reference to Flight model

    userId?: number;     // Reference to User model

    bookingDate?: Date;

    numberOfPassengers?: number;

    status?: string; // e.g., CONFIRMED, CANCELED



Models Structure:





Day 30:

Tasks:

Create folder named components inside src/app

Inside components Create home and  error components inside src/app/components folder: 

HomeComponent displays an overview of the application.

Design the Home page layout by referring the image below.



Home Page:





Day 31:

Tasks:

Inside components folder create the component named flight-list and manage-booking

FlightListComponent
The FlightListComponent serves as a panel for displaying and managing flights within the application.

Properties:
flights: An array to hold the list of Flight objects.
errorMessage: A string to display any error messages related to flight operations.
userRole: A string representing the user's role, retrieved from local storage.
Lifecycle Hook:
ngOnInit(): Loads the flights when the component initializes by calling the loadFlights() method.


ManageBookingComponent
The ManageBookingComponent functions as a panel for managing bookings within the application.

Properties:
bookings: An array to hold the list of Booking objects.
errorMessage: A string that displays any error messages related to booking operations.
Lifecycle Hook:
ngOnInit(): Loads the bookings when the component initializes by calling the loadBookings() method.


add-flight component







flight-list component



﻿



manage-booking component

Please disregard the user details, update of the status should be done in day 26





AddFlightComponent: is responsible for adding new flights and editing existing flights.



add-flight.component.html

The component displays a form for adding or editing flight details, including flight number, airline, departure and arrival locations, times, and price.
Required fields are marked with an asterisk, and error messages are shown if validation fails.
A success modal appears upon successful addition or update of a flight, providing feedback to the user.
The "Add Flight" or "Update Flight" button is disabled if the form is invalid.
add-flight.component.ts

Declare a variable named flight to represent the flight object being added or edited.
The class contains properties for managing success and error messages and a flag (isEditing) to determine the current mode (adding or editing).
Methods:
ngOnInit() : Checks for an existing flight ID from the route to load flight data for editing.
loadFlight(id: string) : Fetches flight details.
addOrUpdateFlight() : Handles the submission of the form, either creating a new flight or updating an existing one based on the editing flag.
closeModal() : Closes the success modal and navigates to the flight list.


FlightListComponent: is responsible for displaying a list of flights, navigating to the booking page, and managing flight updates and deletions.

flight-list.component.html

The component displays a table listing all available flights with columns for flight details (number, airline, locations, times, price).
"Update" and "Delete" buttons are available for each flight if the user role is Admin; otherwise, a "Book" button is shown.
An error message is displayed if flight data fails to load, and a message indicates when no flights are available.
flight-list.component.ts

Declare a variable named flights to hold an array of Flight objects.
The class contains a property for managing error messages and retrieves the user role from local storage.
Methods:
ngOnInit(): Loads flights when the component initializes.
loadFlights(): Fetches the list of flights.
navigateToBooking(flightId: number): Navigates to the booking form with the selected flight ID.


Day 32:

Tasks:

ManageBookingComponent: is responsible for displaying and managing bookings, including updating their status.

manage-booking.component.html

The component displays a table listing all bookings with columns for flight number, user details (name and email), booking date, and status.
Action buttons ("Approve" and "Reject") are provided for each booking to allow for status updates.
An error message is displayed if there is an issue loading bookings, and a message indicates when no bookings are available.
manage-booking.component.ts

Declare a variable named bookings to hold an array of Booking objects and an errorMessage for handling errors.
The class contains methods to manage bookings effectively.
Methods:
ngOnInit(): Loads bookings when the component initializes.
loadBookings(): Fetches the list of bookings from the backend and handles any loading errors.
updateBookingStatus(bookingId: number, status: string): Updates the status of a specific booking and refreshes the list after the update.


flight-list.component.ts

Methods:

updateFlight(id: number): Navigates to the add-flight component for editing the selected flight.
deleteFlight(id: number): Deletes a flight and reloads the flight list.




Day 33:

Tasks:



MyHistoryComponent: is responsible for displaying the user's booking history.

my-history.component.html

The component presents a list of the user's past bookings in an unordered list format.
Each booking entry includes details such as booking ID, flight ID, booking date, and current status.
Each booking is visually separated by a horizontal rule for clarity.
my-history.component.ts

Declare a variable named bookings to hold an array of Booking objects.
A userId variable is initialized by retrieving the user ID from local storage.
The class contains methods to manage the user's booking history.
Methods:
ngOnInit(): Calls loadUserBookings() when the component initializes to fetch the user's bookings.
loadUserBookings(): Retrieves bookings specific to the user ID from the backend and handles any potential errors during the fetch process.




Day 34:

Tasks:

Routing:

AppRoutingModule: is responsible for defining and managing the application's routing configuration.

Routing Configuration:

/: Navigates to the HomeComponent, serving as the main entry point of the application.
/add-flight/:id: Accesses the AddFlightComponent for editing a specific flight identified by its ID.
/add-flight: Opens the AddFlightComponent for adding a new flight.
/flight-list: Displays all available flights through the FlightListComponent.
/manage-booking: Provides booking management options via the ManageBookingComponent, allowing admins to manage user bookings.
/book-form: Enables users to make a booking through the BookingFormComponent.
/my-history: Shows the user's booking history via the MyHistoryComponent. 


Module Configuration:

The AppRoutingModule imports RouterModule and configures it with the defined routes using RouterModule.forRoot(routes).
It exports RouterModule to make routing functionalities available throughout the application.


HTML Structure (navbar.component.html)
Site Title: The <h1> element serves as the site title, linking to the home page using routerLink. The title "SkyBooker" is styled to have no text decoration and inherits the color.
Navigation Links: The <ul> element contains navigation links that adapt based on the user's authentication status:
Unauthenticated Links: When the user is not logged in (!isLoggedIn), links for "Register", "Login", and "Home" are displayed.
Authenticated Links: When the user is logged in (isLoggedIn):
Displays the username and role.
A "Home" link is always visible.
Admin Links: If the user role is 'Admin':
A dropdown menu for managing flights appears, allowing navigation to "Add Flight" and "Manage Flights".
A "Manage Booking" link is also shown.
Passenger Links: If the user role is 'Passenger':
Links to "Book Flight" and "History" are available.
A "Logout" button is provided, which triggers a confirmation popup when clicked.
Logout Confirmation Popup: A conditional <div> displays a confirmation message when the user attempts to log out. The user can confirm or cancel the logout action.


TypeScript Logic (navbar.component.ts)
Imports: The component imports necessary modules: Component, OnInit from Angular core, Router for navigation for authentication handling.

Class Properties:
showDropdown: Boolean to manage the visibility of the dropdown menu.
showLogoutPopup: Boolean to control the logout confirmation popup.
isLoggedIn: Tracks the user's authentication status.
userRole: Stores the role of the authenticated user.
userName: Holds the username of the logged-in user.
ngOnInit: The ngOnInit lifecycle method initializes the component's state by checking the user's authentication status and retrieving role and name from localStorage.
Logout Method:
The logout() method handles user logout:
It calls the logout method to log the user out.
It removes the user role and name from localStorage to clear stored information.
It updates the local properties to reflect the logout state and navigates the user back to the login page.


Navbar before login:



Admin Navbar:



Passenger Navbar:





Day 35:

Tasks:

Folder Structure: Create a folder named services inside src/app.

Service Files: Inside the app/services folder, create services named auth.service.ts, booking.service.ts, and flight.service.ts.

HttpClient Integration: Integrate Angular's  in each service to manage API requests.

API Method Implementation: Implement all HTTP methods (GET, POST, PUT, DELETE) for each service, corresponding to their specific API endpoints.

Use of Observables: Use Observables to handle asynchronous operations with the API, ensuring that the components can subscribe to these data streams.

Base URL Declaration: Declare a public property baseUrl in each service to store the backend URL.

Example: public baseUrl = 'http://your_workspace_url:8080/api';
Replace 'your_workspace_url' with the actual URL of your workspace on port 8080.


AuthService
Purpose: The AuthService manages user authentication, registration, and role-based access within the application.
Key Features:
User Authentication: Utilizes BehaviorSubject to track and emit the current user's authentication status, user role, and ID.
Token Management: Stores and manages the authentication token and user details in localStorage.
Role Checks: Provides methods to check if the user is an admin or a customer based on stored roles.
User Registration: Allows new users to register via a POST request to the backend.
User Login: Handles user login, storing the received token and user details upon successful authentication.
Logout: Clears stored user data upon logout, resetting the application state.
Error Handling: Implements error handling for API calls, allowing the application to continue running even if an error occurs.


BookingService
Purpose: The BookingService handles all operations related to bookings, including creating, retrieving, updating, and deleting bookings.
Key Features:
Create Booking: Allows users to create a new booking via a POST request.
Get Booking by ID: Retrieves a specific booking using its ID through a GET request.
Get All Bookings: Fetches a list of all bookings.
Update Booking: Updates existing booking details via a PUT request.
Delete Booking: Deletes a specific booking using its ID via a DELETE request.
Get Bookings by User ID: Retrieves all bookings associated with a specific user ID.
API Integration: Utilizes a base API URL to communicate with the backend, enabling flexibility in changing the backend endpoint.


FlightService
Purpose: The FlightService is responsible for managing flight-related operations within the application.
Key Features:
Create Flight: Facilitates the addition of new flights via a POST request.
Get Flight by ID: Allows retrieval of flight details using its ID through a GET request.
Get All Flights: Fetches a list of all available flights.
Update Flight: Updates the details of an existing flight via a PUT request.
Delete Flight: Deletes a flight using its ID through a DELETE request.
HTTP Configuration: Includes common HTTP headers for JSON content-type to ensure proper API communication.


Day 36:

Tasks:

Create a template-driven form within the RegisterComponent, consisting of fields for Username, Email, Password, Confirm Password, Mobile Number, and Role.

Validations to be performed:

Display an error message in the RegisterComponent when the username input field is empty.
Assign the ID 'username' to the <input> field for username.
Use <input type="text"> to get the username input.
Display the error message "Username is required" if the username input field is empty.
Assign the ID 'email' to the email input field.
Use <input type="email"> to get the email input.
Display the error message "Email is required" if the email input field is empty.
Display the error message "Please enter a valid email" for invalid email formats.
Assign the ID 'password' to the password input field.
Use <input type="password"> to get the password input.
Display the error message "Password is required" if the password input field is empty.
For invalid passwords, display the error message "Password must include at least one uppercase letter, one lowercase letter, one digit, and one special character".
Assign the ID 'confirmPassword' to the confirm password input field.
Use <input type="password"> to get the confirm password input.
Display the error message "Confirm Password is required" if the confirm password input field is empty.
Display the error message "Passwords do not match" if there is a mismatch between the password and confirm password.
Assign the ID 'mobile' to the mobile number input field.
Use <input type="tel"> to get the mobile number input.
Display the error message "Mobile number is required" if the mobile number input field is empty.
Display the error message "Mobile number must be 10 digits" for invalid mobile number formats.
Assign the ID 'userRole' to the role selection dropdown.
Use a <select> element to allow role selection.
Display the error message "Role is required" if no role is selected.
Ensure that a <div> element with the class 'error-message' is present to contain the error messages.
Implement the register() method within the RegisterComponent, which calls the register() method in the AuthService. This method checks for password complexity, handles successful registration, and manages error responses.

Use a modal popup to inform the user upon successful registration and provide a button to redirect to the login page. Implement keyboard accessibility for the modal popup to ensure a good user experience.



Register Page:





LoginComponent:

Create a template-driven form within the LoginComponent, consisting of fields for Email and Password.

Validations to be performed:

Display an error message in the LoginComponent when the email input field is empty.
Assign the ID 'email' to the <input> field for email.
Use <input type="text"> to get the email input.
Display the error message "Email is required" if the email input field is empty.
Display the error message "Please enter a valid email address" for invalid email formats.
Assign the ID 'password' to the password input field.
Use <input type="password"> to get the password input.
Display the error message "Password is required" if the password input field is empty.
Ensure that a <div> element with the class 'error-message' is present to contain the error messages.
Implement the login() method within the LoginComponent, which calls the login() method in the AuthService. This method handles successful login scenarios, differentiates user roles, and manages error responses.

Provide a link for users who don't have an account to navigate to the registration page, ensuring a smooth transition for new users.

Consider adding keyboard accessibility for the form elements to enhance user experience, allowing for efficient navigation through the form fields.



Login Page:







AuthGurad:

Implement an AuthGuard to ensure accurate routing management.

The AuthService should provide methods for checking the user's authentication status (isLoggedIn) and role (isAdmin, isOrganizer).

The canActivate method checks if the user is logged in using the isLoggedIn method from the AuthService.

If the user is not logged in, it redirects the user to the login page.

After verifying the user's authentication status, the canActivate method checks if the user has the required role to access the requested route.

It examines the URL segment of the route (route.url[0].path) to determine the route type (e.g., 'admin', 'organizer').

Based on the route type, it checks if the user has the corresponding role (isAdmin, isOrganizer methods from AuthService).

If the user does not have the required role, it redirects the user to a forbidden page.

RouteGuard Configuration:

Utilize canActivate property to protect routes that require authentication. (AdminComponent and OrganizerComponent)
Ensure that the AuthGuard service is provided and correctly implemented to handle authentication logic.


Commands to run the angular app:

cd angularapp - This folder is used to work with Angular
npm install - To install the angular packages
npx ng generate component <component-name> - to create new component
npx ng generate service <service-name> - to create new service
npm start - To run the angular application in the 8081 port
Note :
 The project will not be submitted if "Submit Project" is not done atleast once 
