###****This Description has only limited information. Kindly refer to the pdf document given in the learner course for more details, images and screenshots with instructions****###



Vehicle Loan-Hub



Welcome to VehicleLoanHub, where applying for vehicle loans is seamless for users and efficient for administrators. Users can easily apply for loans for cars, trucks, or motorcycles through our intuitive platform, while administrators can manage applications effortlessly. With real-time updates and analytics, users can track their applications, and administrators can make informed decisions. VehicleLoanHub simplifies the financing process, ensuring a smooth experience for all involved.



Users of the System: 

1. Admin

2. User



Admin Actions: 



Loan: Admins can view and create new loans by providing necessary information.
Loan Requested: Admins can access and review applied loans, with the ability to update their status by approving or rejecting them.
Feedbacks: Admins have the option to view user’s feedback.


User Actions:



Loan: Users can view and apply for the list of loans.
Applied Loan: Users can view the list of applied loans.
Feedback: Users have the option to create and view their feedback.
 

Modules of the Application: 

Admin:

Register
Login
Home
Loan
Loan Requested
Feedbacks


User:

Register
Login
Home
Loans
Applied Loan
Feedback


Technology Stack



Front End : Angular 10+, HTML, CSS 

 

Back End : Java, Springboot, Mysql 

 

Authentication : JWT for User Authentication



Application assumptions:



The login page should be the first page rendered when the application loads.
Manual routing should be restricted by implementing Auth Guard, utilizing the canActivate interface. For example, if the user enters as http://localhost:8080/dashboard or http://localhost:8080/user the page should not navigate to the corresponding page instead it should redirect to the login page.
Unless logged into the system, the user cannot navigate to any other pages.
Logging out must again redirect to the login page.


Backend Requirements: 



Create folders named as model, repository, service, controller and config inside springapp as  

mentioned in the below screenshot. 

 

Backend Project Structure: 



In config folder, create a class CrosConfig with @Configuration annotation which implements WebMvcConfigurer to enable CORS functionality and also add all files related to JWT. 
In controller folder, create classes named AuthController, LoanController, LoanApplicationController, FeedbackController implement REST APIs (Refer the API table). 
In repository folder, create the interfaces named as UserRepo, FeedbackRepo,  LoanRepo, LoanApplicationRepo which extends JpaRepository. 
Ensure adherence to the specified API outlined in the API table, ensuring consistency in  class names, variables, and folder structure as detailed. 


Model Classes: 



Create model folder inside springapp. Inside the model folder create all the classes mentioned 

below. 

 

User: This class stores all user information.  

 

• userId: int (auto-generated, primary key) 

• email: String  

• password: String  

• username: String  

• mobileNumber: String  

• userRole: String (Supplier/Owner) 

 

Loan: This class stores all medicine information. 

  

• loanId: Long (auto-generated, primary key) 

• loanType: String  

• description: String  

• interestRate: int  

• maximumAmount: int 

 

LoanApplication: This class stores all feed information.  

 

• loanApplicationId: Long (auto-generated, primary key) 

• submissionDate: LocalDate  

• income: double 

• model: String  

• purchasePrice: double  

• loanStatus: int  

• address: String  

• file: String 

• user: User (@ManyToOne, @JoinColumn(name=”userId”)) 

• loan: Loan (@ManyToOne, @JoinColumn(name=”loanId”)) 

 

Feedback: This class stores all feedback information.  

 

• feedbackId: int (auto-generated, primary key) 

• feedbackText: String  

• date : LocalDate  

• user: user (@ManyToOne, @JoinColumn(name=”userId”)) 



Interfaces to be used: 



1. LoanInterface: 

Create an interface LoanService inside the service folder with the below-mentioned abstract methods and provide implementation for these methods in LoanServiceImpl class. 

 

public interface LoanService { 

   Loan addLoan(Loan loan) throws LoanAlreadyExistsException; 

   Optional<Loan> getLoanById(Long loanId); 

   List<Loan> getAllLoans(); 

   Loan updateLoan(Long loanId, Loan updatedLoan); 

   Loan deleteLoan(Long loanId); 

} 

 

2. LoanApplicationInterface: 

Create an interface LoanApplication inside the service folder with the below-mentioned abstract  

methods and provide implementation for these methods in LoanApplicationServiceImpl class. 

 

public interface LoanApplicationService { 

   public LoanApplication addLoanApplication(LoanApplication loanApplication); 

   public List<LoanApplication> getLoanApplicationByUserId(Long userId); 

   public Optional<LoanApplication> getLoanApplicationById(Long loanapplicationId); 

   public List<LoanApplication> getAllLoanApplications(); 

   public LoanApplication updateLoanApplication(Long loanApplicationId, LoanApplication updatedLoanApplication); 

   public LoanApplication deleteLoanApplication(Long loanApplicationId); 

} 

 

3. FeedbackInterface: 

Create an interface FeedbackService inside the service folder with the below-mentioned abstract  

methods and provide implementation for these methods in FeedbackServiceImpl class. 

 

public interface FeedbackService { 

   public Feedback addFeedback(Feedback feedback); 

   public List<Feedback> getFeedbackByUserId(Long userId); 

   public List<Feedback> getAllFeedbacks(); 

   public Optional<Feedback> getFeedbackById(Long id); 

   public Feedback updateFeedback(Long id, Feedback updatedFeedback); 

   public Feedback deleteFeed(Long id); 

 

   } 

 

Frontend Requirements: 

Create a folder named components inside the app to store all the components. (Refer project structure screenshots). 
Create a folder named models inside app to store all the model interface. 
Create a folder named as services inside app to implement all the services. 
Create model interface referring the backend entities (User, Loan, Loanapplication, Feedback) mentioned in the backend requirements accordingly. 
You can create your own components based on the application requirements. 
Import model files, services and components as required. 
 Declare all the model interface varriables are Optional.


Frontend Models: 

 

User Model: 

class User { 

UserId?: number; 

Email: string; 

Password: string; 

Username: string; 

MobileNumber: string; 

UserRole: string; 

} 

 



Login Model: 

class Login { 

Email: string; 

Password: string; 

} 

 

LoanApplication Model: 

interface LoanApplication { 

LoanApplicationId?: number; 

UserId?: number; 

UserName: string; 

LoanId?: number; 

SubmissionDate: String; 

Income: number; 

Model: string; 

PurchasePrice: number; 

LoanStatus: number; 

Address: string; 

File: string; 

} 

 

Loan Model: 

interface Loan { 

LoanId?:number; 

LoanType: string; 

Description: string; 

InterestRate: number; 

MaximumAmount: number; 

} 

 

Feedback Model: 

class Feedback { 

FeedbackId?: number; 

UserId: number; 

FeedbackText: string; 

Date: Date; 

} 

 

Frontend services:  

Declare a public property apiUrl to store the backend URL in all the services. 
For example, public apiUrl = 'http://localhost:8080'. Instead of 'localhost', replace it with the URL of your workspace port 8080 URL. 
For the API’s to be used please refer the API Table. 
Authorized token to be passed in headers for all end points. 


1. AuthService(auth.service.ts): 

Create a service name as auth inside app/services folder to implement the following functions. 
Methods Overview: 

register(user: User): Observable<any>: 
Use this method to register a new user. It sends a POST request to the '/api/register' endpoint with the user data provided as the body. 
 

login(login : Login): Observable<any>: 
This method is used to authenticate a user by logging them in. It sends a POST request to the '/api/login' endpoint with the user's email and password. Upon successful login, it stores the JWT token in localStorage and updates the user's role and ID using BehaviorSubjects. 
 

2. LoanService(loan.service.ts): 

Create a service name as loan inside app/services and implement the following functions in it. 
Methods Overview: 

getAllLoans(): Observable<Loan[]>: 
Use this method to fetch all loans from the server. It sends a GET request to the '/api/loan' endpoint with the authorization token prefixed with 'Bearer' stored in localStorage. 
 

deleteLoan(loanId: string): Observable<void>: 
Call this method to delete a loan with the specified ID. It sends a DELETE request to the '/api/loan/:id' endpoint with the loan ID and the authorization token prefixed with 'Bearer' stored in localStorage. 
 

getLoanById(id: string): Observable<Loan>: 
Use this method to retrieve a loan by its ID. It sends a GET request to the '/api/loan/:id' endpoint with the loan ID and the authorization token prefixed with 'Bearer' stored in localStorage. 
 

addLoan(requestObject: Loan): Observable<Loan>: 
Call this method to add a new loan. It sends a POST request to the '/api/loan' endpoint with the loan data provided as the requestObject and the authorization token prefixed with 'Bearer' stored in localStorage. 
 

updateLoan(id: string, requestObject: Loan): Observable<Loan>: 
Use this method to update an existing loan. It sends a PUT request to the '/api/loan/:id' endpoint with the loan ID and the updated loan data provided as the requestObject, along with the authorization token prefixed with 'Bearer' stored in localStorage. 
 

getAppliedLoans(userId: string): Observable<LoanApplication[]>: 
This method retrieves all loan applications submitted by a specific user. It sends a GET request to the '/api/loan-application/user/:userId' endpoint with the user ID and the authorization token prefixed with 'Bearer' stored in localStorage. 
 

deleteLoanApplication(loanId: string): Observable<void>: 
Call this method to delete a loan application with the specified ID. It sends a DELETE request to the '/api/loan-application/:id' endpoint with the loan application ID and the authorization token prefixed with 'Bearer' stored in localStorage. 
 

addLoanApplication(data: LoanApplication): Observable<LoanApplication>: 
Use this method to submit a new loan application. It sends a POST request to the '/api/loan-application' endpoint with the loan application data provided as the data parameter and the authorization token prefixed with 'Bearer' stored in localStorage. 
 

getAllLoanApplications(): Observable<LoanApplication[]>: 
This method fetches all loan applications from the server. It sends a GET request to the '/api/loan-application' endpoint with the authorization token prefixed with 'Bearer' stored in localStorage. 
 

updateLoanStatus(id: string, loanApplication: LoanApplication): Observable<LoanApplication>: 
Call this method to update the status of a loan application. It sends a PUT request to the '/api/loan-application/:id' endpoint with the loan application ID, updated loan application data, and the authorization token prefixed with 'Bearer' stored in localStorage. 
 

3. FeedbackServic(feedback.service.ts): 

Create a service name as feedback inside app/services and implement the following functions in it. 
Methods Overview: 

 

sendFeedback(feedback: Feedback): Observable<Feedback>: 
Use this method to send feedback to the server. It sends a POST request to the '/api/feedback' endpoint with the feedback data provided and the authorization token prefixed with 'Bearer' stored in localStorage. 
 

getAllFeedbacksByUserId(userId: string): Observable<Feedback[]>: 
This method retrieves all feedbacks submitted by a specific user. It sends a GET request to the '/api/feedback/user/:userId' endpoint with the user ID and the authorization token prefixed with 'Bearer' stored in localStorage. 
 

deleteFeedback(feedbackId: string): Observable<void>: 
Call this method to delete a feedback with the specified ID. It sends a DELETE request to the '/api/feedback/:feedbackId' endpoint with the feedback ID and the authorization token prefixed with 'Bearer' stored in localStorage. 
 

getFeedbacks(): Observable<Feedback[]>: 
This method fetches all feedbacks from the server. It sends a GET request to the '/api/feedback' endpoint with the authorization token prefixed with 'Bearer' stored in localStorage. 


﻿Validations: 

 

Client-Side Validation: 

Implement client-side validation using HTML5 attributes and JavaScript to validate user input before making API requests. 
Provide immediate feedback to users for invalid input, such as displaying error messages near the input fields. 
 

Server-Side Validation: 

Implement server-side validation in the controllers to ensure data integrity. 
Validate user input and API responses to prevent unexpected or malicious data from affecting the application. 
Return appropriate validation error messages to the user interface for any validation failures. 
 

Exception Handling: 

Implement exception handling mechanisms in the controllers to gracefully handle errors and exceptions. Define custom exception classes for different error scenarios, such as API communication errors or database errors. 
Log exceptions for debugging purposes while presenting user-friendly error messages to users. Record all the exceptions and errors handled store in separate table “ErrorLogs”. 
 

Error Pages: 

Create custom error pages for different HTTP status codes (e.g., 404 Not Found, 500 Internal Server Error) to provide a consistent and user-friendly error experience. Ensure that error pages contain helpful information and guidance for users. 

Thus, create a reliable and user-friendly web application that not only meets user expectations but also provides a robust and secure experience, even when faced with unexpected situations. Error page has to be displayed if something goes wrong. 



Platform Prerequisites (Do’s and Don’ts): 

The angular app should run in port 8081. 
The dotnet app should run in port 8080. 
To incorporate .Net Security into the application, use JWT authentication within the project workspace. 
 

Key points to remember: 

The id (for frontend) and attributes(backend) mentioned in the SRS should not be modified at any cost. Failing to do may fail test cases. 
Remember to check the screenshots provided with the SRS. 
Strictly adhere to the proper project scaffolding (Folder structure), coding conventions, method definitions and return types. 
Adhere strictly to the endpoints mentioned in API endpoints section. 
Don't delete any files in a project environment. 
 

 

HOW TO RUN THE PROJECT:

 

BACKEND: 

Open the terminal and follow the commands below. 

cd springapp 
To run the application in port 8080 

mvn spring-boot: run 
If the same error persists clean the project and build again 

 

 

To Work with MysqlServer: 

(Open a New Terminal) type the below commands 

mysql -u root –protocol=tcp -p 

password: examly 

 

Note: 

Please ensure that the application is running on port 8080 before clicking the "Run Test Case" button. 
Database Name should be appdb 
FRONTEND: 

 

Open the terminal and follow the commands below. 

Step 1: 

• Use "cd angularapp" command to go inside the angularapp folder 

• Install Node Modules - "npm install" 

 

Step 2: 

• Write the code inside src/app folder 

• Create the necessary components 

• To create Service: "npx ng g s <service name>" 

• To create Component: "npx ng g c <component name>" 

 

Step 3: 

• Click the Run Test Case button to run the test cases 

 

Note: 

• Click PORT 8081 to view the result / output. 

• If any error persists while running the app, delete the node modules and reinstall them. 
